"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Query {
  messages(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): MessageConnection
  accounts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): AccountConnection
  account(id: ID!): Account
  transactions(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): TransactionConnection
  transaction(id: ID!): Transaction
  node(id: ID!): Node
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge"""
  node: Message

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a message"""
type Message implements Node {
  """The ID of an object"""
  id: ID!
  content: String
  createdAt: String
}

"""Represents an account"""
type Account implements Node {
  id: ID!
  accountNumber: String!
  balance: String
  name: String!
  userTaxId: String
  createdAt: String
  updatedAt: String
  transactions(
    after: String
    first: Int
    createdAt: String 
    before: String
    last: Int
  ): TransactionConnection
}

"""A connection to a list of accounts."""
type AccountConnection {
  pageInfo: PageInfo!
  edges: [AccountEdge]
}

"""An edge in an account connection."""
type AccountEdge {
  node: Account
  cursor: String!
}

"""Represents a transaction"""
type Transaction implements Node {
  id: ID!
  senderAccountId: String
  receiverAccountId: String
  idempotencyKey: String
  value: String!
  description: String
  createdAt: String
}

"""A connection to a list of transactions."""
type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]
}

"""An edge in a transaction connection."""
type TransactionEdge {
  node: Transaction
  cursor: String!
}

input TransferInput {
  value: Int!
  senderAccountId: String!
  receiverAccountId: String!
  idempotencyKey: String!
  createdAt: String
  clientMutationId: String
}

type TransferPayload {
  transaction: Transaction
  clientMutationId: String
}

type Mutation {
  MessageAdd(input: MessageAddInput!): MessageAddPayload
  AccountAdd(input: AccountAddInput!): AccountAddPayload
  createTransaction(input: TransferInput!): TransferPayload
}

type MessageAddPayload {
  message: Message
  clientMutationId: String
}

input MessageAddInput {
  content: String!
  clientMutationId: String
}

type AccountAddPayload {
  account: Account
  clientMutationId: String
}

input AccountAddInput {
  accountNumber: String!
  balance: Float!
  userTaxId: String!
  clientMutationId: String
}

type Subscription {
  MessageAdded(input: MessageAddedInput!): MessageAddedPayload
  AccountAdded(input: AccountAddedInput!): AccountAddedPayload
  TransactionAdded(input: TransactionAddedInput!): TransactionAddedPayload
}

type MessageAddedPayload {
  message: Message
  clientSubscriptionId: String
}

input MessageAddedInput {
  clientSubscriptionId: String
}

type AccountAddedPayload {
  account: Account
  clientSubscriptionId: String
}

input AccountAddedInput {
  clientSubscriptionId: String
}

type TransactionAddedPayload {
  transaction: Transaction
  clientSubscriptionId: String
}

input TransactionAddedInput {
  accountId: ID!
  clientSubscriptionId: String
}